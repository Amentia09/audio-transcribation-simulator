events {}

http {
  upstream minio_api     { server minio:9000; }
  upstream minio_console { server minio:9001; }

  server {
    listen 9000;
    server_name _;

    client_max_body_size 0;
    proxy_http_version 1.1;
    proxy_buffering off;
    proxy_request_buffering off;
    ignore_invalid_headers off;

    location / {
      proxy_pass http://minio_api;

      
      proxy_set_header Host              $http_host;   
      proxy_set_header X-Real-IP         $remote_addr;
      proxy_set_header X-Forwarded-For   $proxy_add_x_forwarded_for;
      proxy_set_header X-Forwarded-Proto $scheme;

      
      proxy_hide_header Access-Control-Allow-Origin;
      proxy_hide_header Access-Control-Allow-Methods;
      proxy_hide_header Access-Control-Allow-Headers;
      proxy_hide_header Access-Control-Allow-Credentials;
      proxy_hide_header Access-Control-Expose-Headers;

      add_header Access-Control-Allow-Origin      $http_origin always;
      add_header Access-Control-Allow-Credentials true         always;
      add_header Access-Control-Allow-Methods     "GET, PUT, POST, DELETE, HEAD, OPTIONS" always;
      add_header Access-Control-Allow-Headers     "Authorization,Content-Type,Content-MD5,Accept,Origin,User-Agent,Range,x-amz-content-sha256,x-amz-date,x-amz-security-token,x-amz-user-agent,x-amz-acl,x-amz-meta-*,x-amz-checksum-crc32" always;
      add_header Access-Control-Expose-Headers    "ETag,Accept-Ranges,Content-Range,x-amz-request-id,x-amz-id-2" always;

      if ($request_method = OPTIONS) { return 204; }
    }
  }

  server {
    listen 9001;
    server_name _;

    location / {
      proxy_pass http://minio_console;
      proxy_http_version 1.1;

      proxy_set_header Host              $http_host;   
      proxy_set_header X-Real-IP         $remote_addr;
      proxy_set_header X-Forwarded-For   $proxy_add_x_forwarded_for;
      proxy_set_header X-Forwarded-Proto $scheme;
    }
  }
}
